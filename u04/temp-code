static void matmul(int n, double a[n][n], double b[n][n], double c[n][n]) {
  int t = 272;
  double tmp;
  int i, i2, j, j2, k, k2, iUpper, kUpper, jUpper, iBound, kBound, jBound, jBound2;
  for (i = 0; i < n; i += t){
    iUpper=i+t;
    iBound = iUpper < n ? iUpper : n;
    for (j = 0; j < n; j += t){
      jUpper=j+t;
      jBound = jUpper < n ? jUpper : -1;
      jBound2 = jUpper > n ? n : -1;
      for (k = 0; k < n; k += t){
        kUpper=k+t;
        kBound = kUpper < n ? kUpper : n;
        for (i2 = i; i2 < iBound; ++i2)
          for (k2 = k; k2 < kBound; ++k2){
            double tmp = b[i2][k2];
            for (j2 = j; j2 < jBound;j2+=16){
              a[i2][j2] +=  tmp * c[k2][j2];
              a[i2][j2+1] +=  tmp * c[k2][j2+1];
              a[i2][j2+2] +=  tmp * c[k2][j2+2];
              a[i2][j2+3] +=  tmp * c[k2][j2+3];
              a[i2][j2+4] +=  tmp * c[k2][j2+4];
              a[i2][j2+5] +=  tmp * c[k2][j2+5];
              a[i2][j2+6] +=  tmp * c[k2][j2+6];
              a[i2][j2+7] +=  tmp * c[k2][j2+7];
              a[i2][j2+8] +=  tmp * c[k2][j2+8];
              a[i2][j2+9] +=  tmp * c[k2][j2+9];
              a[i2][j2+10] +=  tmp * c[k2][j2+10];
              a[i2][j2+11] +=  tmp * c[k2][j2+11];
              a[i2][j2+12] +=  tmp * c[k2][j2+12];
              a[i2][j2+13] +=  tmp * c[k2][j2+13];
              a[i2][j2+14] +=  tmp * c[k2][j2+14];
              a[i2][j2+15] +=  tmp * c[k2][j2+15];
            }
            for (j2 = j; j2 < jBound2; ++j2){
              a[i2][j2] +=  tmp * c[k2][j2];
            }
          }
      }
    }
  }
}

static void matmul(int n, double a[n][n], double b[n][n], double c[n][n]) {
  int i, j, j2, k, k2, t;
  double tmp, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  t = 272;
  for (k = 0; k < n; k += t)
    for (j = 0; j < n; j += t)
      for (i = 0; i < n; ++i)
        for (k2 = k; k2 < (k+t < n ? k+t : -1); k2+=2){
          tmp = b[i][k2];
          tmp1 = b[i][k2+1];
          for (j2 = j; j2 < (j+t < n ? j+t : -1);j2+=8){
            a[i][j2] += tmp * c[k2][j2];
            a[i][j2+1] += tmp * c[k2][j2+1];
            a[i][j2+2] += tmp * c[k2][j2+2];
            a[i][j2+3] += tmp * c[k2][j2+3];
            a[i][j2+4] += tmp * c[k2][j2+4];
            a[i][j2+5] += tmp * c[k2][j2+5];
            a[i][j2+6] += tmp * c[k2][j2+6];
            a[i][j2+7] += tmp * c[k2][j2+7];
            a[i][j2] += tmp1 * c[k2][j2];
            a[i][j2+1] += tmp1 * c[k2][j2+1];
            a[i][j2+2] += tmp1 * c[k2][j2+2];
            a[i][j2+3] += tmp1 * c[k2][j2+3];
            a[i][j2+4] += tmp1 * c[k2][j2+4];
            a[i][j2+5] += tmp1 * c[k2][j2+5];
            a[i][j2+6] += tmp1 * c[k2][j2+6];
            a[i][j2+7] += tmp1 * c[k2][j2+7];
          }
          for (j2 = j; j2 < (j+t > n ? n : -1); ++j2){
            a[i][j2] +=  tmp * c[k2][j2];
            a[i][j2] +=  tmp1 * c[k2][j2];
          }
        }
        for(k2 = k; k2 < (k+t > n ? n : -1); ++k2){
          tmp = b[i][k2];
          for (j2 = j; j2 < (j+t < n ? j+t : -1);j2+=8){
            a[i][j2] += tmp * c[k2][j2];
            a[i][j2+1] += tmp * c[k2][j2+1];
            a[i][j2+2] += tmp * c[k2][j2+2];
            a[i][j2+3] += tmp * c[k2][j2+3];
            a[i][j2+4] += tmp * c[k2][j2+4];
            a[i][j2+5] += tmp * c[k2][j2+5];
            a[i][j2+6] += tmp * c[k2][j2+6];
            a[i][j2+7] += tmp * c[k2][j2+7];
          }
          for (j2 = j; j2 < (j+t > n ? n : -1); ++j2){
            a[i][j2] +=  tmp * c[k2][j2];
          }
        }
}



Current best version:
static void matmul(int n, double a[n][n], double b[n][n], double c[n][n]) {
  int t = 272;
  double tmp, tmp2;
  int i, i2, j, j2, k, k2, iUpper, kUpper, jUpper, iBound, kBound, jBound, jBound2;
  for (i = 0; i < n; i += t){
    iUpper=i+t;
    iBound = iUpper < n ? iUpper : n;
    for (k = 0; k < n; k += t){
      kUpper=k+t;
      kBound = kUpper < n ? kUpper : n;
      for (j = 0; j < n; j += t){
        jUpper=j+t;
        jBound = jUpper < n ? jUpper : -1;
        jBound2 = jUpper > n ? n : -1;
        for (i2 = i; i2 < iBound; ++i2)
          for (k2 = k; k2 < kBound; ++k2){
            tmp = b[i2][k2];
            // tmp2 = b[i2][k2+1];
            for (j2 = j; j2 < jBound;j2+=16){
              a[i2][j2] +=  tmp * c[k2][j2];
              a[i2][j2+1] +=  tmp * c[k2][j2+1];
              a[i2][j2+2] +=  tmp * c[k2][j2+2];
              a[i2][j2+3] +=  tmp * c[k2][j2+3];
              a[i2][j2+4] +=  tmp * c[k2][j2+4];
              a[i2][j2+5] +=  tmp * c[k2][j2+5];
              a[i2][j2+6] +=  tmp * c[k2][j2+6];
              a[i2][j2+7] +=  tmp * c[k2][j2+7];
              a[i2][j2+8] +=  tmp * c[k2][j2+8];
              a[i2][j2+9] +=  tmp * c[k2][j2+9];
              a[i2][j2+10] +=  tmp * c[k2][j2+10];
              a[i2][j2+11] +=  tmp * c[k2][j2+11];
              a[i2][j2+12] +=  tmp * c[k2][j2+12];
              a[i2][j2+13] +=  tmp * c[k2][j2+13];
              a[i2][j2+14] +=  tmp * c[k2][j2+14];
              a[i2][j2+15] +=  tmp * c[k2][j2+15];
            }
            for (j2 = j; j2 < jBound2; ++j2){
              a[i2][j2] +=  tmp * c[k2][j2];
            }
          }
      }
    }
  }
}